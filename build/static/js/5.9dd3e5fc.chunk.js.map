{"version":3,"sources":["components/Chat.js"],"names":["Chat","socket","useRef","appState","useContext","StateContext","appDispatch","DispatchContext","inputRef","chatLog","useImmer","fieldValue","chatMessages","state","setState","handleSubmit","e","preventDefault","current","emit","message","token","user","chat","draft","push","username","avatar","useEffect","isChatOpen","focus","type","scrollTop","scrollHeight","length","io","process","BACKENDURL","on","disconnect","id","className","onClick","ref","map","index","src","to","onSubmit","required","value","onChange","target","placeholder","autoComplete","autoFocus","data-tip","data-for"],"mappings":"iMAiHeA,UAzGf,WACI,IAAMC,EAAQC,iBAAO,MACfC,EAAWC,qBAAWC,KACtBC,EAAcF,qBAAWG,KACzBC,EAAUN,iBAAO,MACjBO,EAAUP,iBAAO,MACvB,EAAuBQ,YAAS,CAC5BC,WAAW,GACXC,aAAa,KAFjB,mBAAOC,EAAP,KAAaC,EAAb,KAoCA,SAASC,EAAaC,GAClBA,EAAEC,iBAEFhB,EAAOiB,QAAQC,KAAK,kBAAkB,CAACC,QAAQP,EAAMF,WAAWU,MAAOlB,EAASmB,KAAKD,MAAME,KAAKpB,EAASmB,KAAKC,OACzF,IAApBV,EAAMF,YAAuC,KAAnBE,EAAMF,YAAuC,MAAnBE,EAAMF,YAC3DG,GAAS,SAAAU,GACLA,EAAMZ,aAAaa,KAAK,CAACL,QAASI,EAAMb,WAAWe,SAASvB,EAASmB,KAAKI,SAASC,OAAOxB,EAASmB,KAAKK,OAAOJ,KAAKpB,EAASmB,KAAKC,OAClIC,EAAMb,WAAa,MAG3B,OAzCAiB,qBAAU,WACHzB,EAAS0B,aACRrB,EAASU,QAAQY,QACjBxB,EAAY,CAACyB,KAAK,4BAExB,CAAC5B,EAAS0B,aAEZD,qBAAU,WACNnB,EAAQS,QAAQc,UAAYvB,EAAQS,QAAQe,aACzCpB,EAAMD,aAAasB,SAAW/B,EAAS0B,YACtCvB,EAAY,CAACyB,KAAK,+BAExB,CAAClB,EAAMD,eAETgB,qBAAU,WAON,OANA3B,EAAOiB,QAASiB,IAAGC,mIAAYC,YAAa,6CAC5CpC,EAAOiB,QAAQoB,GAAG,kBAAmB,SAAAlB,GACjCN,GAAS,SAAAU,GACLA,EAAMZ,aAAaa,KAAKL,SAGzB,kBAAKnB,EAAOiB,QAAQqB,gBAC7B,IAoBE,sBAAKC,GAAG,eAAeC,UAAW,4DAA8DtC,EAAS0B,WAAa,2BAA2B,IAAjJ,UACI,sBAAKY,UAAU,4BAAf,iBAEI,sBAAMA,UAAU,uBAAuBC,QAAS,kBAAIpC,EAAY,CAACyB,KAAK,eAAtE,SACI,mBAAGU,UAAU,6BAGzB,qBAAKD,GAAG,OAAOC,UAAU,WAAWE,IAAKlC,EAAzC,SACKI,EAAMD,aAAagC,KAAI,SAACxB,EAAQyB,GAC7B,OAAGzB,EAAQM,UAAYvB,EAASmB,KAAKI,SAE7B,sBAAKe,UAAU,YAAf,UACI,qBAAKA,UAAU,eAAf,SACI,qBAAKA,UAAU,qBAAf,SAAqCrB,EAAQA,YAErD,qBAAKqB,UAAU,0BAA0BK,IAAK1B,EAAQO,WAJtBkB,GASpC,sBAAiBJ,UAAU,aAA3B,UACI,cAAC,IAAD,CAAMM,GAAE,mBAAc3B,EAAQM,UAA9B,SACA,qBAAKe,UAAU,cAAcK,IAAK1B,EAAQO,WAE9C,qBAAKc,UAAU,eAAf,SACI,sBAAKA,UAAU,qBAAf,UACA,cAAC,IAAD,CAAMM,GAAE,mBAAc3B,EAAQM,UAA9B,SACI,mCAASN,EAAQM,SAAjB,UAEHN,EAAQA,eATHyB,QAgBtB,uBACIG,SAAUjC,EACVyB,GAAG,WAAWC,UAAU,uBAF5B,UAGI,uBACAQ,UAAQ,EACRC,MAAOrC,EAAMF,WACbwC,SA5DR,SAA2BnC,GACvB,IAAMkC,EAAQlC,EAAEoC,OAAOF,MACvBpC,GAAS,SAAAU,GACLA,EAAMb,WAAauC,MA0DnBP,IAAKnC,EAAUuB,KAAK,OAAOU,UAAU,aAAaD,GAAG,YACrDa,YAAY,uBAAkBC,aAAa,MAAMC,WAAS,IAC1D,yBAAQb,QAAS3B,EAAc0B,UAAU,uBAAuBe,WAAS,OAAOC,WAAS,OAAzF,UAAgG,mBAAGhB,UAAU,uBAA7G,OACA,cAAC,IAAD,CAAcD,GAAG,OAAOC,UAAU","file":"static/js/5.9dd3e5fc.chunk.js","sourcesContent":["import React,{useContext,useEffect,useRef} from 'react';\r\nimport StateContext from './../StateContext';\r\nimport DispatchContext from './../DispatchContext';\r\nimport {useImmer} from 'use-immer';\r\nimport io from 'socket.io-client';\r\nimport {Link} from 'react-router-dom';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nfunction Chat() {\r\n    const socket =useRef(null);\r\n    const appState = useContext(StateContext);\r\n    const appDispatch = useContext(DispatchContext);\r\n    const inputRef =useRef(null);\r\n    const chatLog = useRef(null);\r\n    const [state,setState]=useImmer({\r\n        fieldValue:'',\r\n        chatMessages:[],\r\n    })\r\n\r\n    useEffect(() =>{\r\n        if(appState.isChatOpen){\r\n            inputRef.current.focus()\r\n            appDispatch({type:'clearUnreadChatCount'})\r\n        }\r\n    },[appState.isChatOpen])\r\n\r\n    useEffect(() =>{\r\n        chatLog.current.scrollTop = chatLog.current.scrollHeight;\r\n        if(state.chatMessages.length && !appState.isChatOpen){\r\n            appDispatch({type:'incrementUnreadChatCount'})\r\n        }\r\n    },[state.chatMessages])\r\n\r\n    useEffect(() =>{\r\n        socket.current =io(process.env.BACKENDURL ||'https://backend-social-app1.herokuapp.com')\r\n        socket.current.on('chatFromServer' , message=>{\r\n            setState(draft=>{\r\n                draft.chatMessages.push(message);\r\n            }) \r\n        })\r\n        return ()=> socket.current.disconnect(); //clean up\r\n    },[])\r\n\r\n    function handleFieldChange(e){\r\n        const value = e.target.value\r\n        setState(draft=>{\r\n            draft.fieldValue = value\r\n        })\r\n    }\r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n        // send messages to chat server\r\n        socket.current.emit('chatFromBrowser',{message:state.fieldValue,token: appState.user.token,chat:appState.user.chat})\r\n        {state.fieldValue != '' && state.fieldValue !=' ' && state.fieldValue !='  '&&\r\n        setState(draft=>{\r\n            draft.chatMessages.push({message: draft.fieldValue,username:appState.user.username,avatar:appState.user.avatar,chat:appState.user.chat});\r\n            draft.fieldValue = '';\r\n        })}\r\n    }\r\n    return (\r\n        <div id=\"chat-wrapper\" className={'chat-wrapper shadow border-top border-left border-right ' + (appState.isChatOpen ? 'chat-wrapper--is-visible':'')}>\r\n            <div className=\"chat-title-bar bg-primary\">\r\n                Chat\r\n                <span className=\"chat-title-bar-close\" onClick={()=>appDispatch({type:'closeChat'})}>\r\n                    <i className=\"fas fa-times-circle\"></i>\r\n                </span>\r\n        </div>\r\n        <div id=\"chat\" className=\"chat-log\" ref={chatLog}>\r\n            {state.chatMessages.map((message,index) =>{\r\n                if(message.username == appState.user.username){\r\n                    return(\r\n                        <div className=\"chat-self\" key={index}>\r\n                            <div className=\"chat-message\">\r\n                                <div className=\"chat-message-inner\">{message.message}</div>\r\n                            </div>\r\n                        <img className=\"chat-avatar avatar-tiny\" src={message.avatar} />\r\n                        </div>\r\n                    )\r\n                }\r\n                return(\r\n                    <div key={index} className=\"chat-other\">\r\n                        <Link to={`/profile/${message.username}`}>\r\n                        <img className=\"avatar-tiny\" src={message.avatar} />\r\n                    </Link>\r\n                    <div className=\"chat-message\">\r\n                        <div className=\"chat-message-inner\">\r\n                        <Link to={`/profile/${message.username}`}>\r\n                            <strong>{message.username}: </strong>\r\n                        </Link>\r\n                        {message.message}\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                )\r\n            })}\r\n        </div>\r\n        <form \r\n            onSubmit={handleSubmit}\r\n            id=\"chatForm\" className=\"chat-form border-top\">\r\n            <input\r\n            required\r\n            value={state.fieldValue} \r\n            onChange={handleFieldChange}\r\n            ref={inputRef} type=\"text\" className=\"chat-field\" id=\"chatField\" \r\n            placeholder=\"Type a messageâ€¦\" autoComplete=\"off\" autoFocus/>\r\n            <button onClick={handleSubmit} className=\"chat-button btn-info\" data-tip='Send' data-for='send'><i className=\"far fa-paper-plane\"></i> </button>\r\n            <ReactTooltip id='send' className='custom-tooltip'/>\r\n        </form>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n"],"sourceRoot":""}